// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/leaflet.module.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/leaflet.module' {
import { ModuleWithProviders } from '@angular/core';
export class LeafletModule {
    static forRoot(): ModuleWithProviders;
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/leaflet.module' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/leaflet.module';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive' {
/// <reference types="leaflet" />
import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChange } from '@angular/core';
import * as L from 'leaflet';
export class LeafletDirective implements OnChanges, OnInit {
    readonly DEFAULT_ZOOM: number;
    readonly DEFAULT_CENTER: L.LatLng;
    readonly DEFAULT_FPZ_OPTIONS: {};
    element: ElementRef;
    resizeTimer: any;
    map: L.Map;
    fitBoundsOptions: {};
    panOptions: {};
    zoomOptions: {};
    zoomPanOptions: {};
    options: L.MapOptions;
    mapReady: EventEmitter<L.Map>;
    zoom: number;
    center: L.LatLng;
    fitBounds: L.LatLngBounds;
    constructor(el: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [key: string]: SimpleChange;
    }): void;
    getMap(): L.Map;
    onResize(): void;
    /**
     * Resize the map to fit it's parent container
     */
    private doResize();
    /**
     * Manage a delayed resize of the component
     */
    private delayResize();
    /**
     * Set the view (center/zoom) all at once
     * @param center The new center
     * @param zoom The new zoom level
     */
    private setView(center, zoom);
    /**
     * Set the map zoom level
     * @param zoom the new zoom level for the map
     */
    private setZoom(zoom);
    /**
     * Set the center of the map
     * @param center the center point
     */
    private setCenter(center);
    /**
     * Fit the map to the bounds
     * @param center the center point
     */
    private setFitBounds(latLngBounds);
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive.wrapper.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive.wrapper' {
/// <reference types="leaflet" />
import { LeafletDirective } from '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive';
export class LeafletDirectiveWrapper {
    protected leafletDirective: LeafletDirective;
    constructor(leafletDirective: LeafletDirective);
    init(): void;
    getMap(): L.Map;
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive.wrapper' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive.wrapper';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-layers-object-diff.model.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-layers-object-diff.model' {
/// <reference types="leaflet" />
import * as L from 'leaflet';
export class LeafletLayersObjectDiff {
    remove: L.Control.LayersObject;
    add: L.Control.LayersObject;
    constructor(remove: L.Control.LayersObject, add: L.Control.LayersObject);
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-layers-object-diff.model' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-layers-object-diff.model';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-control-layers.util.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-control-layers.util' {
/// <reference types="leaflet" />
import * as L from 'leaflet';
import { LeafletLayersObjectDiff } from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-layers-object-diff.model';
export class LeafletControlLayersUtil {
    diffLayers(newLayers: L.Control.LayersObject, prevLayers: L.Control.LayersObject): LeafletLayersObjectDiff;
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-control-layers.util' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-control-layers.util';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layer-diff.model.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layer-diff.model' {
/// <reference types="leaflet" />
import * as L from 'leaflet';
export class LeafletLayerDiff {
    remove: L.Layer[];
    add: L.Layer[];
    constructor(remove: L.Layer[], add: L.Layer[]);
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layer-diff.model' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layer-diff.model';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layers.util.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layers.util' {
/// <reference types="leaflet" />
import * as L from 'leaflet';
import { LeafletLayerDiff } from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layer-diff.model';
export class LeafletLayersUtil {
    static diffLayers(newLayers: L.Layer[], prevLayers: L.Layer[]): LeafletLayerDiff;
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layers.util' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layers.util';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-tile-layer-definition.model.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-tile-layer-definition.model' {
/// <reference types="leaflet" />
export class LeafletTileLayerDefinition {
    type: string;
    url: string;
    options: any;
    constructor(type: string, url: string, options: any);
    /**
     * Creates a TileLayer from the provided definition. This is a convenience function
     * to help with generating layers from objects.
     *
     * @param layerDef The layer to create
     * @returns {L.TileLayer} The TileLayer that has been created
     */
    static createTileLayer(layerDef: LeafletTileLayerDefinition): L.TileLayer;
    /**
     * Creates a TileLayer for each key in the incoming map. This is a convenience function
     * for generating an associative array of layers from an associative array of objects
     *
     * @param layerDefs A map of key to tile layer definition
     * @returns {{[p: string]: L.TileLayer}} A new map of key to TileLayer
     */
    static createTileLayers(layerDefs: {
        [key: string]: LeafletTileLayerDefinition;
    }): {
        [key: string]: L.TileLayer;
    };
    /**
     * Create a Tile Layer from the current state of this object
     *
     * @returns {L.TileLayer} A new TileLayer
     */
    createTileLayer(): L.TileLayer;
}
}
declare module '@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-tile-layer-definition.model' {
export * from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-tile-layer-definition.model';
}

// Generated by typings
// Source: node_modules/@asymmetrik/angular2-leaflet/dist/index.d.ts
declare module '~@asymmetrik/angular2-leaflet/dist/index' {
export { LeafletModule } from '~@asymmetrik/angular2-leaflet/dist/leaflet/leaflet.module';
export { LeafletDirective } from '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive';
export { LeafletDirectiveWrapper } from '~@asymmetrik/angular2-leaflet/dist/leaflet/core/leaflet.directive.wrapper';
export { LeafletControlLayersUtil } from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/control/leaflet-control-layers.util';
export { LeafletLayersUtil } from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-layers.util';
export { LeafletTileLayerDefinition } from '~@asymmetrik/angular2-leaflet/dist/leaflet/layers/leaflet-tile-layer-definition.model';
}
declare module '@asymmetrik/angular2-leaflet/dist/index' {
export * from '~@asymmetrik/angular2-leaflet/dist/index';
}
declare module '@asymmetrik/angular2-leaflet' {
export * from '~@asymmetrik/angular2-leaflet/dist/index';
}
